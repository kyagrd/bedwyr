# Makefile.in designed for ndcore/bedwyr
#
# $(make TARGET=$TARGET) compiles
# $(make TARGET=$TARGET install) installs
# $(make TARGET=$TARGET dist) builds packages
#
# $TARGET can be "ndcore" for this library only,
# "bedwyr" for the program only (requires ndcore to either
# having been compiled just before, installed in a custom place
# wrt the current Makefile config, or installed in a standard place),
# and "" for both (in which case all the doc will be in /u/s/d/bedwyr).

# DEFINITIONS

PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
DIST_NAME       = $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)
ifeq ($(TARGET),)
PACKAGE_NAME = $(PACKAGE_TARNAME)
else
PACKAGE_NAME = $(TARGET)
endif
LIB_SUFFIXES	= @LIB_SUFFIXES@
BIN_SUFFIXES	= @BIN_SUFFIXES@
TEST_SUFFIX	= @TEST_SUFFIX@

SHELL		= @BASH@
TAR		= @TAR@ -p
FIND		= @FIND@
GZIP		= @GZIP@ -4
BZIP2		= @BZIP2@ -9
OCAMLBUILD	= @OCAMLBUILD@ -classic-display

prefix		= @prefix@
exec_prefix	= @exec_prefix@
bindir		= @bindir@
#sbindir	= @sbindir@
#libexecdir	= @libexecdir@
datarootdir	= @datarootdir@
#datadir	= @datadir@
#sysconfdir	= @sysconfdir@
#sharedstatedir	= @sharedstatedir@
#localstatedir	= @localstatedir@
#includedir	= @includedir@
#oldincludedir	= @oldincludedir@
docdir		= $(patsubst %$(PACKAGE_TARNAME),%$(PACKAGE_NAME),@docdir@)
#infodir	= @infodir@
htmldir		= @htmldir@
#dvidir		= @dvidir@
pdfdir		= @pdfdir@
psdir		= @psdir@
libdir		= @libdir@
#localedir	= @localedir@
mandir		= @mandir@

PREFIX		= $(DESTDIR)$(prefix)
EXEC_PREFIX	= $(DESTDIR)$(exec_prefix)
BINDIR		= $(DESTDIR)$(bindir)
#SBINDIR	= $(DESTDIR)$(sbindir)
#LIBEXECDIR	= $(DESTDIR)$(libexecdir)
DATAROOTDIR	= $(DESTDIR)$(datarootdir)
#DATADIR	= $(DESTDIR)$(datadir)
#SYSCONFDIR	= $(DESTDIR)$(sysconfdir)
#SHAREDSTATEDIR	= $(DESTDIR)$(sharedstatedir)
#LOCALSTATEDIR	= $(DESTDIR)$(localstatedir)
#INCLUDEDIR	= $(DESTDIR)$(includedir)
#OLDINCLUDEDIR	= $(DESTDIR)$(oldincludedir)
DOCDIR		= $(DESTDIR)$(docdir)
#INFODIR	= $(DESTDIR)$(infodir)
HTMLDIR		= $(DESTDIR)$(htmldir)
#DVIDIR		= $(DESTDIR)$(dvidir)
PDFDIR		= $(DESTDIR)$(pdfdir)
PSDIR		= $(DESTDIR)$(psdir)
LIBDIR		= $(DESTDIR)$(libdir)/ocaml/slimmer
#LOCALEDIR	= $(DESTDIR)$(localedir)
MANDIR		= $(DESTDIR)$(mandir)

VIMFILES	= $(DATAROOTDIR)/vim/vimfiles

INSTALL     = @INSTALL@
INSTALL_OPTS=-v
INSTALL_DIR = @INSTALL_PROGRAM@ $(INSTALL_OPTS) -d
INSTALL_BIN = @INSTALL_PROGRAM@ $(INSTALL_OPTS) -p
INSTALL_DOC = @INSTALL_DATA@ $(INSTALL_OPTS) -p

cma = @cma@

# FILES

XPL = list.def internal/scoping.def internal/checks.def \
      3bits.def lambda.def progs.def \
      graph-alt.def minmax.def multisim.def \
      tictactoe.def \
      pi/pi_trace.def pi/corr-assert.def pi/pi_modal.def \
      pi/pi_asserts.def

# debhelper has his own tools to install those standard docs
ifeq ($(DISTRIB),debian)
NDCORE_DOCS	=
BEDWYR_DOCS	=
else
NDCORE_DOCS	= COPYING ChangeLog README TODO
BEDWYR_DOCS	= COPYING ChangeLog README TODO
endif
DOCS		= $(BEDWYR_DOCS)
VIM_CONTRIB	= ftdetect/bedwyr.vim \
		  syntax/bedwyr.vim
CONTRIB		= contrib/emacs/bedwyr.el \
		  $(VIM_CONTRIB:%=contrib/vim/%)
EXAMPLES	= $(shell find examples -type f '!' -path '*.svn*' \
		  '!' -name \*~ '!' -name .\*.sw\* '!' -name \*.old)
MANUAL		= manual-1.4
PS_FILES	= $(MANUAL:%=doc/%).ps.gz
PDF_FILES	= $(MANUAL:%=doc/%).pdf
HTML_FILES	= $(MANUAL:%=doc/%).html
ARCH_FILES	= configure.ac Makefile.in install-sh \
		  $(DOCS) $(CONTRIB) $(EXAMPLES)

ndcore_prefix	= src/ndcore/ndcore
bedwyr_prefix	= src/bedwyr

ndcore_libs	= $(LIB_SUFFIXES:%=$(ndcore_prefix).%)
bedwyr_bins	= $(BIN_SUFFIXES:%=$(bedwyr_prefix).%)

# BUILDING

#.PHONY: $(ndcore_libs) $(bedwyr_bins)

build: src/config.ml src/ndcore/Makefile src/Makefile doc/Makefile Makefile src/ndcore/META
ifeq ($(TARGET),ndcore)
	$(MAKE) $(ndcore_libs)
else ifeq ($(TARGET),bedwyr)
	$(MAKE) $(bedwyr_bins)
#else ifeq ($(TARGET),)
#	$(MAKE) $(ndcore_libs)
#	$(MAKE) $(bedwyr_bins)
endif

$(ndcore_libs): src/ndcore/Makefile

$(bedwyr_bins): src/Makefile

%.byte %.native %.cma %.cmxa %.a:
	@$(OCAMLBUILD) $@

%: config.status %.in
	@./$< $@

config.status: configure
	./$< --no-create --disable-doc --disable-nativecode

configure: configure.ac
	autoconf

# TESTING

.PHONY: test test_ndcore test_bedwyr

test:
#ifeq ($(TARGET),)
#	$(MAKE) test_ndcore
#	$(MAKE) test_bedwyr
#else
	$(MAKE) test_$(TARGET)
#endif

test_ndcore: src/ndcore/test.$(TEST_SUFFIX)

src/ndcore/test.$(TEST_SUFFIX):
	@$(OCAMLBUILD) $@
	@echo Testing the core LLambda library
	@_build/$@

test_bedwyr: $(bedwyr_prefix).$(TEST_SUFFIX)
	@echo Testing bedwyr on examples $^ //
	@time for i in $(XPL) ; do \
	  echo "==== Running tests in $$i ====" ; \
	  if _build/$< -t -I examples/$$i ; then echo "All done." ; \
	  else echo "Error." ; break ; fi ; \
	  done

# DOC

.PHONY: doc ndcore_doc bedwyr_doc bedwyr_ref userguide

ifeq (@OCAMLDOC@,)
doc:
	@echo 'Documentation generation disabled,'
	@echo 'run "./configure --enable-doc" to enable it.'
else
  ifeq ($(TARGET),)
doc: ndcore_doc bedwyr_doc
  else
doc: $(TARGET)_doc
  endif
endif

NDCORE_DUMP	= src/ndcore/ocamldoc.dump

ndcore_doc $(NDCORE_DUMP):
	$(MAKE) -C src/ndcore doc

bedwyr_doc: userguide bedwyr_ref

userguide: doc/Makefile
	$(MAKE) -j1 -C doc

bedwyr_ref:
	$(MAKE) -C src doc

# INSTALL

ifeq ($(TARGET),)
install: install_ndcore install_bedwyr
else
install: install_$(TARGET)
endif

ifneq (@OCAMLDOC@,)
install_ndcore: install_ndcore_doc
install_bedwyr: install_bedwyr_doc
endif

install_ndcore: $(ndcore_lib) $(NDCORE_DOCS:=.bz2)
	@$(INSTALL_DIR) $(LIBDIR)
	$(INSTALL_DOC) $(ndcore_lib) $(wildcard $(ndcore_lib:$(cma)=a)) $(LIBDIR)
	$(TAR) -xf $(ndcore_lib:$(cma)=cmi.tar) -C $(LIBDIR)
	@$(INSTALL_DIR) $(DOCDIR)
ifneq ($(NDCORE_DOCS:=.bz2),)
	@$(INSTALL_DOC) $(NDCORE_DOCS:=.bz2) $(DOCDIR)
endif

install_ndcore_doc: ndcore_doc $(NDCORE_DUMP:=.bz2)
	@$(INSTALL_DIR) $(HTMLDIR)/ref
	@$(INSTALL_DOC) doc/html/ndcore/style.css doc/html/ndcore/*.html \
	  $(HTMLDIR)/ref
	@$(INSTALL_DOC) $(NDCORE_DUMP:=.bz2) $(DOCDIR)

install_bedwyr: $(bedwyr_bin) $(BEDWYR_DOCS:=.bz2)
	@$(INSTALL_DIR) $(BINDIR)
	@$(INSTALL_BIN) $(bedwyr_bin) $(BINDIR)
	@$(INSTALL_DIR) $(DOCDIR)
ifneq ($(BEDWYR_DOCS:=.bz2),)
	@$(INSTALL_DOC) $(BEDWYR_DOCS:=.bz2) $(DOCDIR)
endif
	@$(INSTALL_DIR) $(DATAROOTDIR)/$(PACKAGE_NAME)
	@for i in $(CONTRIB) ; do \
	  $(INSTALL_DOC) -D $$i $(DATAROOTDIR)/$(PACKAGE_NAME)/$$i ; done
	@for i in $(VIM_CONTRIB) ; do \
	  $(INSTALL_DOC) -D contrib/vim/$$i $(VIMFILES)/$$i ; done
	@for i in $(EXAMPLES) ; do \
	  $(INSTALL_DOC) -D $$i $(DATAROOTDIR)/$(PACKAGE_NAME)/$$i ; done

install_bedwyr_doc: bedwyr_doc
	@$(INSTALL_DIR) $(PSDIR)
	@$(INSTALL_DIR) $(PDFDIR)
	@$(INSTALL_DIR) $(HTMLDIR)
	@$(INSTALL_DOC) $(PS_FILES) $(PSDIR)
	@$(INSTALL_DOC) $(PDF_FILES) $(PDFDIR)
	@$(INSTALL_DOC) $(HTML_FILES) $(HTMLDIR)
	@$(INSTALL_DIR) $(HTMLDIR)/ref
	@$(INSTALL_DOC) doc/html/bedwyr/style.css doc/html/bedwyr/*.html \
	  $(HTMLDIR)/ref

# ARCHIVE

.PHONY: dist src/ndcore/ndcore.tar src/bedwyr.tar doc/manual.tar dist.tar

dist: $(DIST_NAME).tar.bz2 $(DIST_NAME).tar.gz

src/ndcore/ndcore.tar:
	$(MAKE) -C src/ndcore archive

src/bedwyr.tar:
	$(MAKE) -C src archive

doc/manual.tar:
	$(MAKE) -C doc archive

dist.tar: $(ARCH_FILES)
	$(TAR) -cf $@ --xform 's|^|$(DIST_NAME)/|' $^

$(DIST_NAME).tar: src/ndcore/ndcore.tar src/bedwyr.tar doc/manual.tar dist.tar
	$(TAR) -cf $@ -T /dev/null
	for i in $^ ; do \
	  $(TAR) -Af $@ $$i ; done

%.bz2: %
	$(BZIP2) -f -k $<
%.gz: %
	$(GZIP) -f -c $< > $@

# OTHER TARGETS

.PHONY: help clean distclean

help:
	@echo ' help           this message'
	@echo
	@echo '   $$TARGET can be "ndcore" (for the library only), "bedwyr"'
	@echo '   (for the programm only, requires ndcore to be previously'
	@echo '   compiled or installed), or "" (default, for both)'
	@echo
	@echo ' build (default) compiles $$TARGET'
	@echo ' test           runs tests on $$TARGET'
	@echo ' doc            compiles the doc of $$TARGET'
	@echo '                (requires <build> for ocamlbuild)'
	@echo ' install        install the files of $$TARGET wrt to the'
	@echo '                command-line variable $$DESTDIR and and the'
	@echo '                parameters given to ./configure'
	@echo
	@echo ' dist           build $(DIST_NAME).tar.bz2'
	@echo '                and $(DIST_NAME).tar.gz'
	@echo
	@echo ' help           display this message'
	@echo ' distclean      remove almost all generated files'
	@echo ' clean          remove compiled files'

distclean: clean
	@find . -name '*~' -exec rm -vf \{\} \;
	@rm -vf *.bz2 *.gz *.tar
	@rm -vf config.status config.log
	@rm -vf src/config.ml
	@rm -vf configure
	@rm -vf Makefile
	@rm -vf src/Makefile
	@rm -vf src/ndcore/Makefile
	@rm -rvf autom4te.cache

clean:
	$(OCAMLBUILD) -clean
	$(MAKE) -C src clean
	$(MAKE) -C src/ndcore clean
	$(MAKE) -C doc clean
