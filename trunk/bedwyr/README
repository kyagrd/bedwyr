              =====================================
              # Bedwyr, the not-so-sound logician #
              #     v1.3 -- Bedwyr-with-types     #
              =====================================

 0. Index
----------

1. what
2. license
3. getting
4. building
5. documentation
6. installing
7. distribution


 1. What is Bedwyr?
--------------------

Bedwyr is a theorem prover for the Level-0/1 fragment of the Linc logic.

It is based on Alwen Tiu's Level-0/1, and Nadathur & Linell's LLambda
library, both written in SML. The OCaml translation has been done by
Baelde & Ziegler. It is currently under work by Baelde, Gacek & Heath.
The system also benefited from the wisdom of Miller, Nadathur and Pientka.

For background on the system, see "Mixing Finite Success and Finite Failure
in an Automated Prover" (Alwen Tiu and Gopalan Nadathur and Dale Miller):
http://www.lix.polytechnique.fr/Labo/Dale.Miller/papers/eshol05sub.pdf

Webpage: http://slimmer.gforge.inria.fr/bedwyr/


 2. License
------------

This is free software, licensed under GPL version 2.
A copy of this license can be found in COPYING
or in /usr/share/common-licenses/GPL-2.


 3. Obtaining Bedwyr
---------------------

Released sources may be obtained from:
  https://gforge.inria.fr/frs/?group_id=367

Development sources may be obtained via the commands
  svn checkout svn://scm.gforge.inria.fr/svn/slimmer
or
  svn checkout --username anonsvn https://scm.gforge.inria.fr/svn/slimmer
(the password is the username).

The project is also available in two packages (ndcore and bedwyr)
for Debian (http://slimmer.gforge.inria.fr/releases/debian/ squeeze main)
and Gentoo (public overlay 'dawan').
The ndcore package isn't needed for bedwyr to run.


 4. Building Bedwyr
--------------------

For proper compilation, the following packages are required:
- OCaml (tested with 3.10.0, 3.11.2 and 3.12.1)
- autotools (at least autoconf-2.60) and GNU make
- bash, tar, gzip and bzip2 (needed for the installation)
- some other standard tools

Usually, the three commands
  $ autoconf
  $ ./configure
  $ make
should suffice. Then, run
  $ src/bedwyr
or
  $ src/bedwyr <example>.def
to launch bedwyr, and type "#help." for a little help.


 5. Documentation
------------------

See doc/userguide-1.3.(ps.gz|pdf) for more information on how to use bedwyr.
For those files (and the html documentation generated by ocamldoc)
to be built, you need to replace `./configure ; make` by the sequence
  $ ./configure --enable-doc
  $ make
  $ make doc
and to have latex (and hevea and ocamldoc) installed.


 6. Installation
-----------------

If for some reason you don't want to use bedwyr fresh out of the tarball,
and you won't or can't use one of the provided packages,
you can use the `make install` facility with the following variables:
- $TARGET can either install just ndcore and its documentation ("ndcore"),
  bedwyr and all the documentation and examples ("bedwyr"),
  or both ("", default)
- $DESTDIR (default: "") is a prefix added to all paths, that can be used
  to install the files in a temporary copy of the file hierarchy,
  so that an aborted installation won't leave any file in system folders
Options like "prefix" can also be set at the configure step (see the output
of `./configure --help` for a list of the available options).
Note that `make doc` is not needed before a `make install`.
The recommended sequence is thus
  $ autoconf
  $ ./configure [--enable-doc] [--prefix=/usr/local]
  $ make [ ; make doc]
  $ make TARGET=ndcore install
  $ make TARGET=bedwyr install


 7. Distribution
-----------------

/contrib
  Vim and Emacs files
/examples
  A few simple examples.
/src
  Source code for the prover.
/src/ndcore
  Code for the unification and non-destructive normalization of LLambda.
  Also contains a term indexing module, currenlty only used for tabling,
  and a typing module for type-checking.
  This comes with OUnit and Test for testing it.
