% This code verifies Peterson's algorithm.
% The code is taken from the Level 0/1 Tutorial by Alwen Tiu:
% http://www.lix.polytechnique.fr/~tiu/lincproject/level01/level01.pdf

%    int turn = 0;
%    boolean[ ] active = {false, false};
%    int i, j;
%
%    void process(int k)
%    {
%       i = k;
%       j = 1 - k;
%       while (true) {
% noncs:   active[i] = true;
% reqcs:   turn = j;
%          while (
% letturn:         active[j] &&
% testcs:          turn == j)
%               ;
%           // critical section
% cs:       ...
%           // end of critical section
%           active[i] = false;
%       }
%    }

% Identifier / turn
Type a,b,c      nat.

Define id : nat -> prop
by id 0 ; id 1 ; id 2.

Define next : nat -> nat -> prop
by next 0 1
;  next 1 0.


% Program counter
Kind pc         type.
Type noncs,
     reqcs,
     letturn,
     testcs,
     cs         pc.

Define pc : pc -> prop
by pc noncs
;  pc reqcs
;  pc letturn
;  pc testcs
;  pc cs.


% Flag
Kind flag       type.
Type act,inact  flag.
Define flag : flag -> prop
by flag act ; flag inact.


% State
Kind state      type.
Type state      pc * flag -> pc * flag -> nat -> state.

Define node : state -> prop
by node (state (PC0,Fl0) (PC1,Fl1) T) :=
     pc PC0 /\ pc PC1 /\
     flag Fl0 /\ flag Fl1 /\ id T.

Define step : nat ->                      % me
              (pc * flag) * flag * nat -> % my pc, my flag, his flag, the turn
              (pc * flag) * nat ->        % my new pc, my new flag, the new turn
              prop by
  step _   ((noncs  ,_   ),_    ,T  )  ((reqcs  ,act  ),T  ) ;
  step Me  ((reqcs  ,Flag),_    ,_  )  ((letturn,Flag ),Him) := next Me Him ;
  step _   ((letturn,Flag),inact,T  )  ((cs     ,Flag ),T  ) ;
  step _   ((letturn,Flag),act  ,T  )  ((testcs ,Flag ),T  ) ;
  step Me  ((testcs ,Flag),_    ,Me )  ((cs     ,Flag ),Me ) ;
  step Me  ((testcs ,Flag),_    ,Him)  ((letturn,Flag ),Him) := next Me Him ;
  step _   ((cs     ,_   ),_    ,T  )  ((noncs  ,inact),T  ).

Define arrow : state -> state -> prop
by arrow
     (state P0  P1 Turn)
     (state P0' P1 Turn') :=
       P1 = (_,Fl1) /\ step 0 (P0,Fl1,Turn) (P0',Turn')
;  arrow
     (state P0 P1  Turn)
     (state P0 P1' Turn') :=
       P0 = (_,Fl0) /\ step 1 (P1,Fl0,Turn) (P1',Turn')
.

Define inductive path : state -> state -> prop by
  path X X;
  path X Y := arrow X Z /\ path Z Y.

Define initial : state -> prop
by initial (state (noncs,inact) (noncs,inact) T) := id T.

Define bad : state -> prop
by bad (state (cs,Fl0) (cs,Fl1) T) := flag Fl0 /\ flag Fl1 /\ id T.

Define test : prop
by test := initial I /\
           (forall B, bad B /\ path I B -> printstr "Error\n" /\ false) /\
           printstr "Peterson is right\n".

#assert test.
