% This is an alternate presentation of graphs where the graph structure
% is not hardcoded into the predicates, but rather is kept as a
% datastructure of the following form:
%   (mkgraph (1 :: 2 :: 3 :: 4 :: nil)
%            (arrow 1 2 :: arrow 3 4 :: nil))
% where the the first list is the nodes of the graph and the second is
% the arrows of the graph. The benefit of this representation is that
% we modify the graph on the fly (as seen in the 'tree' predicate).
% The downside is that we must pass the graph as an argument to all of
% our graph predicates.
% Note: This example requires tabling for edgepath.

% List utilities

#include "list.def".

Kind    arrow,
        graph   type.

Type    mkarrow nat -> nat -> arrow.

Type    mkgraph list nat -> list arrow -> graph.

% Nodes of the graph

Define node : graph -> nat -> prop by
  node (mkgraph N _) X := member X N.

% Directed predicates

Define arrow : graph -> nat -> nat -> prop by
  arrow (mkgraph _ A) X Y := member (mkarrow X Y) A.

Define path : graph -> nat -> nat -> prop by
  path G X Y := arrow G X Y;
  path G X Y := arrow G X Z /\ path G Z Y.

% Undirected predicates

Define edge : graph -> nat -> nat -> prop by
  edge G X Y := arrow G X Y \/ arrow G Y X.

Define inductive edgepath : graph -> nat -> nat -> prop by
  edgepath G X X := node G X;
  edgepath G X Y := edge G X Z /\ edgepath G Z Y.
% If we make it coinductive then infinite paths starting from node X
% (typically going back and forth along the same edge) provide an edgepath
% from X to any other node.

% Notions of connectedness

Define connected : graph -> prop by
  connected G := forall X Y, node G X -> node G Y -> edgepath G X Y.

Define disconnected : graph -> prop by
  disconnected G := exists X Y,
                    node G X /\ node G Y /\ (edgepath G X Y -> false).

Define removearrow : graph -> arrow -> graph -> prop by
  removearrow (mkgraph N A) X (mkgraph N Ap) := remove A X Ap.

% A tree is a connected graph that becomes disconnected
% if you remove any edge.

Define tree : graph -> prop by
  tree G := connected G /\ forall A Gp, removearrow G A Gp -> disconnected Gp.

Define nottree : graph -> prop by
  nottree G := disconnected G \/
             exists A Gp, removearrow G A Gp /\ connected Gp.

% Queries to try
Define graph : nat -> graph -> prop by
  %       3
  %      / \
  % 1 - 2   5 - 6
  %      \
  %       4
  graph 1  (mkgraph (1 :: 2 :: 3 :: 4 :: 5 :: 6 :: nil)
                (mkarrow 1 2 :: mkarrow 2 3 :: mkarrow 2 4 ::
                   mkarrow 3 5 :: mkarrow 5 6 :: nil));
  %       3
  %      / \
  % 1 - 2   5 - 6
  %      \ /
  %       4
  graph 2  (mkgraph (1 :: 2 :: 3 :: 4 :: 5 :: 6 :: nil)
                (mkarrow 1 2 :: mkarrow 2 3 :: mkarrow 2 4 ::
                   mkarrow 3 5 :: mkarrow 4 5 ::
                      mkarrow 5 6 :: nil)).

#assert_not (graph 1 G /\ disconnected G).
#assert (graph 1 G /\ tree G).
#assert (graph 2 G /\ nottree G).
