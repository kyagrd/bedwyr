#include "seq.def".

Kind    list    type.
Kind    ty      type.

%object-level constants 
Type    nil     list.
Type    cons    name -> list -> list.

%object-level predicates
Type    append  list -> list -> list -> form.
Type    a,b     form.
Type    p       name -> name -> form.
Type    type_of name -> ty -> form.
Type    copy    name -> name -> form.
Type    subst   (name -> name) -> name -> name -> form.
Type    eval    name -> name -> form.

% objecy-level constructors
Type    abs     (name -> name) -> name.
Type    app     name -> name -> name.
Type    ~>      ty -> ty -> ty.

Define atom : form -> prop by
  atom (append X Y Z);
  atom a;
  atom b;
  atom (p X Y);
  atom (type_of X T);
  atom (copy S T);
  atom (subst R S T);
  atom (eval E V).

#assert prv atom (x\y\ (false)) ((a && b) --> (tt && a)).
#assert
  forall t u w,
    prv atom
      (x\y\ (false)) (for_all x\ for_all y\ (p x t) --> (p y u) --> (p x w)) ->
    w = t.

% Simple union of two binary relations.  These can be used to
% join together two logic programming specifications.

Define
  orelse : (form -> form -> prop) ->
           (form -> form -> prop) ->
           form -> form -> prop
%  orelse : ('a -> ('b -> prop)) ->
%           ('a -> ('b -> prop)) ->
%           'a -> 'b -> prop
by
  orelse P Q X Y := P X Y \/ Q X Y.

% If you want to form the union of these two "logic programs",
% use either
%    (orelse exprog infer)
% or the lambda-expression
%    (x\y\ exprog x y \/ infer x y)
% as the first argument of prv and seq.

% The empty theory can be written as (x\y\ false).

Define exprog : form -> form -> prop by
% Appending of two lists
  exprog (append nil L L) tt;
  exprog (append (cons X L) K (cons X M)) (append L K M).

% object-level clauses
Define prog : form -> form -> prop by
% Specification of simply typing inference for untyped lambda-calculus.
  prog (type_of (abs x\ B x) (Tin ~> Tout))
     (for_all x\ type_of x Tin --> type_of (B x) Tout);
  prog (type_of (app A B) Tout) ((type_of A (Tin ~> Tout)) && (type_of B Tin));
% Implementation of substitution into the untyped lambda-calculus.
  prog (copy (app M N) (app M' N')) ((copy M M') && (copy N N'));
  prog (copy (abs M) (abs M))
     (for_all x\ for_all x'\ copy x x' --> copy (M x) (M' x'));
  prog (subst R S T) (for_all x\ copy x S --> copy (R x) T);
% Call-by-value evaluation
  prog (eval (abs x\ M x) (abs x\ M x)) tt;
  prog (eval (app M N) V)
     (((eval M (abs M')) && (subst M' N M'')) && (eval M'' V)).

#assert prv atom prog (type_of (abs x\ abs y\ x) T).

#assert prv atom prog (type_of (app (abs x\ abs y\ x) (abs x\ x)) T).

#assert_not   forall T, prv atom prog (type_of (abs x\ app x x) T).
#assert       forall T, prv atom prog (type_of (abs x\ app x x) T) -> false.
#assert_raise (forall T, prv atom prog (type_of (abs x\ app x x) T) -> false) -> true.

#assert forall T S, prv atom prog (type_of (abs x\ x) (T ~> S)) -> T = S.

% The following has four proofs.
#assert exists R, prv atom prog (subst R (abs x\x) (app (abs x\x) (abs y\y))).
