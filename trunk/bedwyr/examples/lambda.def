% Simple lambda calculus examples.

% Informal signature:
% var  : name -> term
% app  : term -> term -> term
% abs  : (term -> term) -> term
% nil  : env
% bind : name -> type -> env
% type : env -> name -> type -> o
% wt   : env -> term -> type -> o

% Typing environment ==========================================================

type (bind A T E) A T.
type (bind A B E) X T := type E X T.

% Adding a (A = X => false) guard to the second clause would avoid
% unnecessary searches, but would make the definition invalid in Level 0.

% Simply typed lambda-calculus ================================================

wt E (var A) T            := type E A T.
wt E (app X Y) T          := wt E X (arrow H T), wt E Y H.
wt E (abs F) (arrow Tx T) := nabla x\ wt (bind x Tx E) (F (var x)) T.

% Play with a few examples ====================================================

#assert (pi T\ wt (bind a t nil) (var a) T => T=t).

#assert (wt (bind a t (bind b (arrow t tt) nil))
            (app (var b) (var a)) T).
#assert (pi T\ wt (bind a t (bind b (arrow t tt) nil))
                  (app (var b) (var a)) T => T=tt).

#assert (pi T\ pi Ta\ pi Tb\
           wt (bind a Ta (bind b Tb nil))
              (app (abs x\ (app (var a) (var b))) (var a))
              T
           => sigma A\ sigma B\ Ta = arrow A B).

#assert_not (sigma T\ wt nil (abs x\ app x x) T).
#assert ((sigma T\ wt nil (abs x\ app x x) T) => false).

#assert_not (pi x\ pi y\       type (bind x t1 (bind y t2 nil)) y t1 => false).
#assert     (nabla x\ nabla y\ type (bind x t1 (bind y t2 nil)) y t1 => false).

test :=
  print "Running simply typed lambda calculus tests...",
  print (running test 1), (pi T\ test_type 1 T => T = t),
  print (running test 2), (pi T\ test_type 2 T => T = tt),
  print (running test 3),
    (pi T\ test_type 3 T => sigma A\ sigma B\ T = arrow A B),
  print (running test 4), _test 4,
  print (running test 5), _test 0,
  print "testing complete".

% If we had written the wt predicate using a pi instead of the nabla then:
% (1) it would have been on Level 1 instead of 0;
% (2) it would have been wrong, as shown by the last assert_not.

% =============================================================================
% The following is just an attempt to think about more complex problems,
% such as proving subject reduction in a natural way..

% In the eval predicate, it could be more natural to use pi instead of nabla,
% since it allows to substitue anything: from (eval (abs F) (abs F')) we
% get (eval (F M) (F' M)). But what we really want is
% eval M M' => eval (abs F) (abs F') => eval (F M) (F M').
% The advantage of using nabla is that it will interact well
% with the nabla used in wt, and make the induction proof easy.

eval (app M N) (app MM NN) := eval M MM, eval N NN.
eval (abs F) (abs FF)      := nabla x\ eval (F x) (FF x).
eval (app M X) N           := eval M (abs F), eval (F X) N.
eval M M.
