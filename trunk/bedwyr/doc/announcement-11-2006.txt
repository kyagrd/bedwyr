Possible mailing lists:	

  types-announce
  proof-theory
  moca-announce
  lprolog
  poplmark
  caml

There is also the ALP newsletter.  For the current version of this news
letter, see
http://www.cs.kuleuven.ac.be/~dtai/projects/ALP/newsletter/.

Draft of an announcement:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

				Bedwyr
	      a proof search approach to model checking
		http://slimmer.gforge.inria.fr/bedwyr/

Bedwyr is a generalization of logic programming that allows model
checking directly on syntactic expression possibly containing
bindings. 

This system, written in OCaml, is a direct implementation of two
recent advances in the theory of proof search.

 (1) It is possible to capture both finite success and finite failure
     in a sequent calculus.  Proof search in such a proof system can
     capture both may and must behavior in operational semantics.

 (2) Higher-order abstract syntax is directly supported using
     term-level lambda-binders, the nabla-quantifier, higher-order
     pattern unification, and explicit substitutions.  These features
     allow reasoning directly on expressions containing bound
     variables.

The distributed system comes with several example applications,
including the finite pi-calculus (operational semantics, bisimulation,
trace analyses and modal logics), the spi-calculus (operational
semantics), value-passing CCS, the lambda-calculus, winning strategies
for games, and various other model checking problems.

While the system has been written to validate certain theoretic
results and to help suggest new theoretical directions, we believe
that the system can be of use to others interested more in reasoning
about computer systems than about proof theory foundations.

Bedwyr is an open source project.  We welcome contributions from
others of example applications and new features.  The developers
behind the current distribution are:

   David Baelde & Dale Miller (INRIA & LIX/Ecole Polytechnique)
   Andrew Gacek & Gopalan Nadathur (University of Minneapolis)
   Alwen Tiu (Australian National University and NICTA).
