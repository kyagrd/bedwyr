#define "isTrue {x} := x = true".

#define "nat {x} := (x=o);(sigma y\ (x=(s y),(nat y)))".
#define "even {x} := (x=o);(sigma y\ (x=(s (s y)),(even y)))".
#define "odd {x} := (x=(s o));(sigma y\ (x=(s (s y)),(odd y)))".
#define "leq x {y} := (x=y);(sigma z\ (y=(s z),(leq x z)))".

#define
  "plus {x} y {z} :=
    (x = o, y = z);
    (sigma m\ n\ x = (s m), z = (s n), plus m y n)".
#define
  "half {x} {h} :=
    (((x=o);(x=(s o))),(h=o));
    (sigma xx\ hh\ (x=(s (s xx)),h=(s hh), (half xx hh)))".

#define
  "mult {x} y {z} :=
    (x = o, z = o);
    (sigma x'\ x = s x', sigma z'\ mult x' y z', plus y z' z)".

#define
  "coinductive sim p q :=
    pi a\ p'\ ((step p a p') => (sigma q'\ (step q a q'),(sim p' q')))".

#define
  "simi p q :=
    pi a\ p'\ ((step p a p') => (sigma q'\ (step q a q'),(simi p' q')))".

#define "empty {x} := (x = nil)".

#define "list {X} := (X = nil); (sigma H\ TL\ X = (cons H TL), (list TL))".
#define
  "equal {X} {Y} :=
    (X = nil, Y = nil);
    (sigma H1\ H2\ T1\ T2\
      X = cons H1 T1, Y = cons H2 T2, H1 = H2, equal T1 T2)".

#define
  "append {L1} L2 {L3} :=
    (L1 = nil, L2 = L3);
    (sigma H\ T1\ T3\
      L1 = cons H T1, 
      L3 = cons H T3,
      append T1 L2 T3)".

#define
  "reverse {L1} {L2} :=
    (L1 = nil, L2 = nil); 
    (sigma H\ T\ RT\
      L1 = cons H T, reverse T RT, append RT (cons H nil) L2)".
