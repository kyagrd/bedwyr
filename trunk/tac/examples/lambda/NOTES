
Notes about other representations

1. Forcing that only variables are looked up in the context

Suppose we define typeof as follows:
  #define "var {M} := pi T\M\F\X\ (M = lambda T F ; M = app F X) => false".
  #define "typeof G {M} T :=
            (var M, bind G M T);
            ...".

This makes it impossible to split the substitution in two steps as before:
  #lemma typeof_cut "
     pi g\m\n\tm\tn\
      typeof (cons (pair n tn) g) m tm =>
      typeof g n tn => typeof g m tm
  ".

But we have to prove directly the more natural but problematic lemma:
  #lemma typeof_cut "
     pi g\m\tm\tn\
      (nabla n\ typeof (cons (pair n tn) g) (m n) tm) =>
      (pi n\ typeof g n tn => typeof g (m n) tm)
  ".

Now, if the type of abstractions is explicit (lambda T M), we end up 
needing to explicitly say that the abstraction m in the above lemma
is a term abstraction and that n cannot occur in types. This would take
another inductive definition, to restrict to well-formed types or describe 
what it is to be abstracted over a term only.

If we do not make explicit the type in (lambda M), then we have to argue
in the process of inducting why the left hand-side of arrows cannot
have nabla variables occurring in it. This is actually impossible in the 
absence of typing: a generic term variable can actually be used as a type.
