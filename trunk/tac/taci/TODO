TODO:
  * Support for adding lemmas to the automatically generated invariant.
    You could back track over each lemma (that is, add only 1 at a time),
    with a case where you add no lemma at all.

  * Currently when processing definitions we don't check that the fixpoints
    we are defining have the right number of arguments, we only check when
    parsing formulas.  It's hard to check this in Firstorder.processPreDefinition,
    because the matcher only looks at heads of applications.  It's hard to check
    after the fact (in the same way as checkMonotonicity) because DBFormulas don't
    track the arity of the formula they represent.
  
  * Firstorder.checkMonotonicity is broken (see p := pi x\ p => false).

  * The 'a polarized type in firstorderabsyn.ml could get factored out by
    pushing the annotation into relevant types.

  * The abstractions corresponding to a pi/sigma/nabla are different than lambda
    abstractions at the heads of invariants or definitions, and the types should
    reflect this.

  * Putting polarity annotations everywhere may allow funny games (like a 
    positive implication) but I really don't see why the application should be 
    polarized -- which caused bugs, and might cause more.

  * Output modules shouldn't take strings but formatters, in order to allow
    thinks like: O.debug "%s: invalid level %d" bla bli

  * [David] Better syntax for higher-order terms
    Currently, (x\y\ ..) is not allowed, only (x\(y\ ..)).
    
  * Support for anonymous fixed points.

  * Type checking.
