(**********************************************************************
* Taci                                                                *
* Copyright (C) 2007 Zach Snow, David Baelde                          *
*                                                                     *
* This program is free software; you can redistribute it and/or modify*
* it under the terms of the GNU General Public License as published by*
* the Free Software Foundation; either version 2 of the License, or   *
* (at your option) any later version.                                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License for more details.                        *
*                                                                     *
* You should have received a copy of the GNU General Public License   *
* along with this code; if not, write to the Free Software Foundation,*
* Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA        *
**********************************************************************)

(**********************************************************************
*mod2def:
* This program converts a Lambda Prolog module to a .def file that
* can be used in a proof script using the #open command.
**********************************************************************)

(**********************************************************************
*getInputChannel/getOutputChannel:
* Open input/output file, exit if there's a failure.  If the output
* file isn't specified, use the input file with a .tex extension.
**********************************************************************)
let inputName = ref ""
let outputName = ref ""
let outline = ref false

(**********************************************************************
* Versioning Information:
**********************************************************************)
let version = "1.0"
let printVersion () =
  (print_endline ("mod2def version " ^ version ^ ".");
  exit 0)

let getInputChannel () =
  if !inputName = "" then
    (print_endline ("Error : no input file specified.");
    exit (-1))
  else
    try
      open_in !inputName
    with _ ->
      (print_endline ("Error : unable to open file '" ^ !inputName ^ "'");
      exit (-1))

let getOutputChannel () =
  let name =
    if !outputName = "" then
      try
        (Filename.chop_extension !inputName) ^ ".def"
      with
        Invalid_argument _ -> !inputName ^ ".def"
    else
      !outputName
  in
    try
      open_out name
    with _ ->
      (print_endline ("Error : unable to open file '" ^ name ^ "'");
      exit (-1))

(**********************************************************************
*header/footer:
**********************************************************************)
let header =
"% This file was generated by mod2def, part of the Tac system.\n"

let footer = ""

(**********************************************************************
*printHelp:
* Simply prints the usage information based on the speclist.
**********************************************************************)
let rec printHelp () = (Arg.usage speclist usage; exit 0)

(**********************************************************************
parseArgs:
* Parse the command line arguments.
* The supported options are:
*   input: specifies the input file.
*   output: specifies the output file.
*   outline: whether to perform outlining or not.
*   help: print usage information.
**********************************************************************)
and speclist = [("-h", Arg.Unit(printHelp), "");
                ("--help", Arg.Unit(printHelp), "");
                ("-i", Arg.Set_string(inputName), "input file");
                ("--input", Arg.Set_string(inputName), "input file");
                ("-o", Arg.Set_string(outputName), "output file");
                ("--output", Arg.Set_string(outputName), "output file");
                ("-v", Arg.Unit(printVersion), "print version information");
                ("--version", Arg.Unit(printVersion), "print version information")]
and usage = "Usage: mod2def --input \"input file\"\n\nOptions:"
let parseArgs output =
    (Arg.parse speclist (fun s -> ()) usage)

(**********************************************************************
*main:
**********************************************************************)
let main () =
  (*  Parse the command line arguments. *)
  try
    let () = parseArgs () in
    
    (*  Read input. *)
    let input = getInputChannel () in
    let definitions = Firstorderlp.translateChannel input in
    let d = String.concat "\n"
      (List.map (fun s -> "\"" ^ s ^ "\"") definitions) in
    
    let output = getOutputChannel () in
    let out s = output_string output s in
    (out header;
    out "#define\n";
    out d;
    out ".\n";
    out footer;
    close_out output;
    exit 0)
  with Firstorderlp.Error(s) ->
    (prerr_endline ("Error : " ^ s);
    exit (-1))


(*  Entrypoint  *)
let () = main ()
