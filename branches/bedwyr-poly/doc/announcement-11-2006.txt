Possible mailing lists:	

  types-announce
  proof-theory
  moca-announce
  lprolog
  poplmark
  caml
  concurrency - some overlap with moca, but is read by model checking people

There is also the ALP newsletter.  For the current version of this news
letter, see
http://www.cs.kuleuven.ac.be/~dtai/projects/ALP/newsletter/.

Draft of an announcement:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

				Bedwyr
	      A proof search approach to model checking
		http://slimmer.gforge.inria.fr/bedwyr/

Bedwyr is a programming framework written in OCaml that facilitates
natural and perspicuous presentations of rule oriented computations
over syntactic expressions and that is capable of model checking based
reasoning over such descriptions.

Bedwyr is in spirit a generalization of logic programming. However, it
embodies two important recent observations about proof search: 

 (1) It is possible to formalize both finite success and finite failure
     in a sequent calculus; proof search in such a proof system can
     capture both may and must behavior in operational semantics
     specifications.

 (2) Higher-order abstract syntax can be supported at a logical level
     by using term-level lambda-binders, the nabla-quantifier,
     higher-order pattern unification, and explicit substitutions; 
     these features allow reasoning directly on expressions containing
     bound variables.

The distribution of Bedwyr includes illustrative applications 
to the finite pi-calculus (operational semantics, bisimulation,
trace analyses and modal logics), the spi-calculus (operational
semantics), value-passing CCS, the lambda-calculus, winning strategies
for games, and various other model checking problems. These examples
should also show the ease with which a new rule based system and
particular questions about its properties can be be programmed in
Bedwyr. Because of this characteristic, we believe that the system can
be of use to people interested in the broad area of reasoning about
computer systems. 

The present distribution of Bedwyr has been developed by the following
individuals:

   David Baelde & Dale Miller (INRIA & LIX/Ecole Polytechnique)
   Andrew Gacek & Gopalan Nadathur (University of Minneapolis)
   Alwen Tiu (Australian National University and NICTA).

In the spirit of an open source project, we welcome
contributions in the form of example applications and also new 
features from others. 
