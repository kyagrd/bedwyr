%% Doing beta-reduction on lambda-terms

%% Define the lambda-calculus encoded with the constructors:
%%   type app   tm -> (tm -> tm).
%%   type abs   (tm -> tm) -> tm.
%% Consider identifying some beta-reduceds with a special marker.  That is,
%% change some expressions of the form (app (abs R) N) to (beta N R), where
%%   type beta  tm -> (tm -> tm) -> tm.

%% We provide two programs that can remove these marked beta redexes.

%% The most direct uses Bedwyr's built-in beta-reduction.
%%    ?= pr (lred Term Reduced).
%% Notice that Reduced is not necessary in beta-normal form: we know,
%% however, that the marked betas do not occur in Reduced.

%% Another method uses paths through lambda-terms: here a path through a
%% marked beta-redex continues through the body until it encounters the
%% bound variable, at which point the path is directed through the
%% argument.  We can now do a kind of model checking or simulation: a
%% term M is a reduced form of term N if all paths in N are paths in M.
%% This approach is more "extensional" and uses Bedwyr in a rather
%% interesting way.  In particular, Bedwyr will need to compute all paths
%% in N, and then, using the magic of logic variables (in prover 1),
%% synthesizes the reduced lambda-term containing those paths.

%% Some of the code that we write uses hypothetical implications which is 
%% not directly available in Bedwyr.  Hence, we call an interpreter for
%% hypothetical implications via the seq predicate in seq.def.  In this way,
%% we can execute lambda-Prolog-style programs within Bedwyr.  The predicate
%% lnorm below stores a "module" of lambda Prolog (a named collection of 
%% clauses.

#include "seq.def".

pr G := seq lnorm tt G.

atom (lred A B).
atom (path A B).
atom (path' A B).
atom (insert_beta A B).

% Reduce marked beta-redexes using Bedwyr beta-reduction.
lnorm (lred (abs R) (abs S))
      (forall x\ forall y\ lred x y -> lred (R x) (S y)).
lnorm (lred (app M N) (app P Q))
      (and (lred M P) (lred N Q)).
lnorm (lred (beta N R) P)
      (lred S P) := (R N) = S.   % reschedule unification to keep to L-lambda.

% Compute paths through a lambda-term.
lnorm (path (abs R) (bnd P))
      (forall x\ forall p\ path x p -> path (R x) (P p)).
lnorm (path (app M N) (left  P))
      (path M P).
lnorm (path (app N M) (right P))
      (path M P).
lnorm (path (beta N R) P)
      (forall x\ (forall Q\ path x Q <- path N Q) -> path (R x) P).
lnorm (path a ap) tt.   % Add a few constants
lnorm (path b bp) tt.
lnorm (path f fp) tt.
lnorm (path g gp) tt.

% This predicate is the same as above, except that it does not contain
% the case for marked beta-redexes.
lnorm (path' (abs R) (bnd P))
      (forall x\ forall p\ path' x p -> path' (R x) (P p)).
lnorm (path' (app M N) (left  P))
      (path' M P).
lnorm (path' (app N M) (right P))
      (path' M P).
lnorm (path' a ap) tt.
lnorm (path' b bp) tt.
lnorm (path' f fp) tt.
lnorm (path' g gp) tt.

% This predicate can be used to insert marked beta-redexes into a term.
lnorm (insert_beta (app (abs R) N) (beta N' R'))
      (and (insert_beta N N')
           (forall x\ insert_beta x x -> insert_beta (R x) (R' x))).
lnorm (insert_beta (app M N) (app P Q))
      (and (insert_beta M P) (insert_beta N Q)).
lnorm (insert_beta (abs R) (abs R'))
      (forall x\ insert_beta x x -> insert_beta (R x) (R' x)).

% M is a reduction of N if all paths in N are paths in M.
reduce N M := pi p\ pr (path N p) => pr (path' M p).

example 1 (app (app (abs x\ abs y\ app x y) (abs w\ app w w)) (abs x\ x)).
example 2 (app (beta (abs w\ app w w) (x\ abs y\ app x y)) (abs x\ x)).
example 3 (abs x\ app x x).
example 4 (app (abs x\ app x x) (abs x\ app x x)).
example 5 (beta (abs w\ app w w) (w\ app w w)).
example 6 (abs x\ app (abs v\ app v x) (abs u\ app (abs w\ app u w) (abs r\ r))).
example 7 (abs (w\ beta (abs (x\ beta (abs (u\ u)) (u\ app x u))) (x\ app x w))).

#assert (pi N\ pi C\ (example C N => sigma M\ sigma P\ (pr (lred N M), reduce N P, M = P))).
