===============================================================================

Tac::StickyTaci::Building and Installing StickyTaci Dependencies

===============================================================================

Building and installing StickyTaci on Windows should be really easy; just
open the solution ("/tac/tac.sln") and build all.  But, that means you will
be using the provided, precompiled dynamic libraries for Scintilla and
Scintilla.NET ("/tac/bin/SciLexer.dll" and "/tac/bin/ScintillaNET.dll",
respectively).  You may want to compile these yourself, for instance if you
want to try to compile StickyTaci with Mono and run it under Linux (honestly,
you should probably try Wine first).  At any rate, it won't be fun, but it
should be possible.

Rebuilding Scintilla with LexSimple.cxx:
  First, download Scintilla's source (http://www.scintilla.org/), compile it,
  and make sure it works correctly; let's call the root directory of your
  Scintilla install "/scintilla".  Note that the following has been tested with
  Scintilla 1.77.
  
  Next, copy "/tac/StickyTaci/LexSimple.cxx" into the "/scintilla/src/", and run
  the python script "/scintilla/src/LexGen.py".

  Next, you'll need to add the following  definitions to the interface file
  ("/scintilla/include/Scintilla.iface").  It should be easy to see where,
  just look at the code for python (search for SCE_PYTHON in the interface file):

    # Lexer ID
    val SCLEX_SIMPLE=91
    
    # Lexical states for SCLEX_SIMPLE
    lex Simple=SCLEX_SIMPLE SCE_SIMPLE_
    val SCE_SIMPLE_DEFAULT=0
    val SCE_SIMPLE_COMMENTLINE=1
    val SCE_SIMPLE_NUMBER=2
    val SCE_SIMPLE_STRING=3
    val SCE_SIMPLE_WORD=4
    val SCE_SIMPLE_WORD2=5
    val SCE_SIMPLE_WORD3=6
    val SCE_SIMPLE_WORD4=7
    val SCE_SIMPLE_OPERATOR=8
    val SCE_SIMPLE_IDENTIFIER=9
    val SCE_SIMPLE_OLDLINE=10

  Note the you should make sure that SCLEX_SIMPLE=91 doesn't interfere with other
  lexers defined in the file; it shouldn't for Scintilla 1.77.
  
  Then, you'll need to regenerate the interfaces using HFacer.py and Face.py,
  and finally recompile Scintilla.  Then, copy the binary (SciLexer.dll or
  similary) to "/tac/StickyTaci/".  And that's it for Scintilla.

Rebuilding Scintilla.NET:
  This part is a tiny bit more involved.  The problem is that Scintilla.NET
  seems to have 'hardcoded' a lot of things when it comes to managing
  'configurations'; at least, hardcoded them in the project file.  Again,
  let's call the Scintilla.NET directory "/ScintillaNET"; you can get the
  source at http://www.codeplex.com/ScintillaNET; be sure to use version 2.0.

  First, you'll need to open the solution for Scintilla.NET and add some
  files to "/ScintillaNET/source/Configuration/Builtin", specifically
  ".../LexerKeywordListNames/simple.txt" and ".../LexerStyleNames/simple.txt".
  Use "/tac/StickyTaci/simple_keywords.txt" for the former, and
  "/tac/StickyTaci/simple_style.txt" for the latter; be sure to rename them each
  to "simple.txt".  Also, be sure that you mark these files to be embedded in
  the generated binary!
  
  Next, modify the file "Enums.cs" so that the public enum 'Lexer' includes
  a value 'Simple'; set it to the same value as SCLEX_SIMPLE.
  
  Finally you can just recompile Scintilla.NET and copy the binary
  (ScintillaNET.dll) to "/tac/StickyTaci/".  And that's it for ScintillaNET.

If everthing goes smoothly you can just rebuild StickyTaci and away you go.
If you have any luck compiling and running StickyTaci on a non-Windows OS, let
us know!
