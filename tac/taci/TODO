TODO:
  * The 'a polarized type in firstorderabsyn.ml could get factored out by
    pusing the annotation into relevant types.

    The abstractions corresponding to a pi/sigma/nabla are different than lambda
    abstractions at the heads of invariants or definitions, and the types should
    reflect this.

    Putting polarity annotations everywhere may allow funny games (like a 
    positive implication) but I really don't see why the application should be 
    polarized -- which caused bugs, and might cause more.

A few things that would be useful:
  * Output modules shouldn't take strings but formatters, in order to allow
    thinks like: O.debug "%s: invalid level %d" bla bli

  * [David] Better syntax for higher-order terms
    Currently, (x\y\ ..) is not allowed, only (x\(y\ ..)).
  
  X [Zach] Monotonicity checking.
  
  * Type checking.
  
  X Generate "simple" invariants from the context.
    After that, generate the most general set of equalities describing
    the relationship between parameters. E.g., for the coinductive proof of
    (sim p p) then invariant is (p\q\ p=q). Sometimes, generalizing by relaxing
    an equality might be needed to complete the proof. I don't know if that is to
    be considered here.
  
  * Generate an invariant from the body of a definition to ease justification
    of unfolding a mu on the left/nu on the right.
  
  * Support for anonymous fixed points.
