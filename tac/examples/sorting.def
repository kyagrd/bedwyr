#open "lists.def".

#define "insert x {l1} l2 :=
  (l1 = nil, l2 = cons x nil);
  (sigma h\ t\
    l1 = cons h t,
    leq x h,
    l2 = cons x l1);
  (sigma h\ t\ tt\
    l1 = cons h t,
    l2 = cons h tt,
    gt x h,
    insert x t tt)".

% NOTE good test for progress.
% Goes wrong if the pattern is partially met.
#define "sorted x :=
  (x = nil);
  (sigma y\ x = cons y nil);
  (sigma c1\ c2\ tl\
    x = cons c1 (cons c2 tl),
    leq c1 c2,
    sorted (cons c2 tl))".

#define "sort {x} y :=
  (x = nil, y = nil) ;
  (sigma hd\tl\stl\ x = cons hd tl, sort tl stl, insert hd stl y)".
