.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"  Bedwyr prover                                                             "
.\"  Copyright (C) 2012 Quentin Heath                                          "
.\"                                                                            "
.\"  This program is free software; you can redistribute it and/or modify      "
.\"  it under the terms of the GNU General Public License as published by      "
.\"  the Free Software Foundation; either version 2 of the License, or         "
.\"  (at your option) any later version.                                       "
.\"                                                                            "
.\"  This program is distributed in the hope that it will be useful,           "
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of            "
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             "
.\"  GNU General Public License for more details.                              "
.\"                                                                            "
.\"  You should have received a copy of the GNU General Public License         "
.\"  along with this code; if not, write to the Free Software Foundation,      "
.\"  Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA              "
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" @configure_input@
.\"
.TH @PACKAGE_TARNAME@ 1 2012/06/27 "@PACKAGE_NAME@ v@PACKAGE_VERSION@" "Slimmer project"
.\"
.SH NAME
@PACKAGE_TARNAME@ - The not-so-sound logician
.\"
.\"
.SH SYNOPSIS
.B @PACKAGE_TARNAME@
\fB\-\-help\fR
.P
.B @PACKAGE_TARNAME@
[ \fIfilename\fR | \fIoption\fR ] *
.P
.B @PACKAGE_TARNAME@.byte
.P
.B @PACKAGE_TARNAME@.native
.\"
.\"
.SH DESCRIPTION
@PACKAGE_NAME@ is a theorem prover for the Level-0/1 fragment of the Linc logic.
.P
It is based on Alwen Tiu's Level-0/1, and Nadathur & Linell's LLambda
library, both written in SML. The OCaml translation has been done by
Baelde & Ziegler and further development by Baelde & Gacek. It is
currently under work by Heath. The system also benefited from the wisdom
of Miller, Nadathur and Pientka.
.P
For background on the system, see "Mixing Finite Success and Finite Failure
in an Automated Prover" (Alwen Tiu and Gopalan Nadathur and Dale Miller):
.B http://www.lix.polytechnique.fr/Labo/Dale.Miller/papers/eshol05sub.pdf
.P
Webpage:
.B http://slimmer.gforge.inria.fr/bedwyr/
.P
When invoked as \fB@PACKAGE_TARNAME@\fR, the faster of the available binaries
is used (i.e. the native code version, \fB@PACKAGE_TARNAME@.native\fR, if
available; otherwise the bytecode version, \fB@PACKAGE_TARNAME@.byte\fR).
.\"
.\"
.SH OPTIONS
.TP
.B \-I
Do not enter interactive mode.
.TP
.B \-t
Run tests in definition files.
Those are the queries given by \fB#assert\fR\fI ...\fR\fB.\fR.
.TP
\fB\-e\fR \fIquery\fR
Execute \fIquery\fR.
Such queries are executed in the order they are given on the command-line,
after all the input files a read but before entering the interactive loop.
.TP
\fB\-\-freezing\fR \fIn\fR
Enable backward chaining and set its limit (the so-called
\fIfreezing point\fR) to \fIn\fR.
Setting the freezing point to 0 (the default value) disables backward chaining,
setting it to \-1 allows infinite chaining (usually not a smart idea).
The value 1 should be a good compromise.
.TP
\fB\-\-saturation\fR \fIn\fR
Enable forward chaining and set its limit (the so-called
\fIsaturation point\fR) to \fIn\fR.
Setting the saturation point to 0 (the default value) disables forward chaining,
setting it to \-1 allows infinite chaining and therefore actual saturation
of the table wrt the theorem.
.TP
\fB\-help\fR, \fB\-\-help\fR
The usual OCaml Arg module option.
.\"
.\"
.SH INPUT FILES
.\"
.SS Type declaration
.TP
\fBKind \fIint,object\fB type.
This is the only kind of types allowed for now.

The predefined types are \fInat\fR, \fIstring\fR and obviously \fIprop\fR.
.\"
.SS Constant declaration
.TP
\fBType \fIz\fB int.
.TP
\fBType \fIs\fB int \-> int.
.TP
\fBType \fIblah\fB (int \-> prop) \-> object.
No polymorphism is available yet, but all proper types
(even higher order ones) are allowed.

Apart from \fItrue\fR and \fIfalse\fR,
there are no actual predefined constants, but some runtime-defined constants:
\fI0\fR, \fI1\fR, ... of type \fBnat\fR and
any quoted string of type \fBstring\fR.
.\"
.SS Predicate declaration and definition
.TP
\fBDefinition \fIp1\fB : int \-> prop, \fIp2\fB : prop by \fIp1 (s (s N)) := p1 N\fB ; \fIp2\fB ; \fIp1 z\fB.
The header of a definition block gives the declarations of the predicates
with mandatory type annotations ending with \fBprop\fR.

The body of a definition block gives discretionary clauses for those predicates,
and only those.
Here, \fIp1\fR is true on even integers and \fIp2\fR is equal to \fItrue\fR.
.TP
\fBDefinition \fIp3\fB : object \-> nat \-> prop, \fIp4\fB : prop by \fIp3 (blah p1) 42\fB.
The head of a bodyless clause is always true.
A predicate without any clauses us always false.
.\"
.SS Theorems
.TP
\fBTheorem \fImy_theorem\fB : \fIforall Y, body X Y \-> head X.\fR
A theorem is a valid Abella theorem with some restrictions on its body
(neither implication nor universal quantification).
.\"
.\"
.SH INTERACTIVE QUERIES
.TP
\fB?= \fIform\fB.\fR
The formula \fIform\fR entered at the prompt is solved,
meaning that @PACKAGE_NAME@ searches for substitutions of free variables
satisfying the formula and offers to display them one by one.
.TP
\fB@PACKAGE_TARNAME@\fR \-e "\fIform\fB.\fR"
Formulae given via this option are dealt with in the exact same way.
.\"
.\"
.SH META-COMMANDS
Those can be given both in a file and to the interactive toplevel.
.TP
.B #help.
This command should give a starting point.
.TP
.B #exit.
And this one, an ending point.
.\"
.\"
.SH OUTPUT
The only non-interactive output is given by \fB#save_table \fIpred\fB "\fInewfile.def\fB".\fR.
