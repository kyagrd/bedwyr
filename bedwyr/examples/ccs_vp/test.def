% several simple examples to show how value-passing CCS processes
% can be defined in Bedwyr.

% Notice that if a CCS expression contains the ite construct, then checking
% bisimulation with itself causes an error in Bedwyr: a logic variable can
% move to the "left" (from prover 1 to prover 0), and implications can occur
% on the "left" (in prover 0).
% Best to avoid mismatch (and other forms of negation) in the specification
% of operational semantics.

% This file contains the declarations required by the pdef predicate.
#include "ccs_vp_decl.def".

Type p0,p1,p2,p3,p4,p5,p6,p7,
     s0,stack,
     q0,queue   nat.
Type s1,q1      value -> nat.
Type s2,q2      value -> value -> nat.

Type a,b,c,d,
     insert,delete
     label.

Type v0,v1      value.

% This predicate is used in ccs_vp.def,
% and thus must be defined between the two first includes of this file.
Define pdef : nat -> proc -> prop by
  % Emit a tau action and repeat.
  pdef p0 (taup (proc p0));

  %  a?x.b!x
  pdef p1 (in a (x\ out b x null));
  %  a?x.if x=1 then b!x | a!1
  pdef p2 (in a (x\ (if x v1 (out b x null))) | out a v1 null);

  % p3 and p4 are not bisimilar in any sense.
  %  a?x.(b!x + c!x)
  pdef p3 (in a (x\ (out b x null + out c x null)));
  %  a?x.b!x + a?x.c!x
  pdef p4 (in a (x\ (out b x null)) + in a (x\ (out c x null)));

  % c?x.if x=0 then a!x else b!x
  pdef p5 (in c (x\ ite x v0 (out a x null) (out b x null)));

  % p6 and p7 are early bisimular, but not late.
  % c?x.if x=0 then a!x else b!x + c?x.d!x
  pdef p6 (in c (x\ ite x v0 (out a x null) (out b x null)) + in c (x\ (out d x null)));
  % c?x.if x=0 then d!x else b!x + c?x.if x=0 then a!x else d!x
  pdef p7 (in c (x\ ite x v0 (out d x null) (out b x null)) + in c (x\ ite x v0 (out a x null) (out d x null)));

  % Stack of size 2
  pdef s0 (in insert x\ (proc (s1 x)));
  pdef (s1 X) (out delete X (proc s0) + in insert y\ (proc (s2 X y)));
  pdef (s2 X Y) (out delete Y (proc (s1 X)));
  pdef stack (proc s0);

  % Queue of size 2
  pdef q0 (in insert x\ (proc (q1 x)));
  pdef (q1 X) (out delete X (proc q0) + in insert y\ (proc (q2 X y)));
  pdef (q2 X Y) (out delete X (proc (q1 Y)));
  pdef queue (proc q0).

#include "ccs_vp.def".
#include "weak.def".
