% This example highlights some simple benefits of tabling.

% Nodes for the graph

Define
  node
by
  node 1;
  node 2;
  node 3;
  node 4;
  node 5;
  node 6.

% Directed predicates

%       3
%      / \
% 1 - 2   5 - 6
%      \ /
%       4
Define
  arrow
by
  arrow 1 2;
  arrow 2 3;
  arrow 2 4;
  arrow 3 5;
  arrow 4 5;
  arrow 5 6.

Define
  path
by
  path X Y := arrow X Y;
  path X Y := arrow X Z /\ path Z Y.

% Undirected predicates

Define
  edge
by
  edge X Y := arrow X Y \/ arrow Y X.

Define
  inductive edgepath
by
  edgepath X Y := edge X Y;
  edgepath X Y := edge X Z /\ edgepath Z Y.

% Queries to try

Define
  allpaths
by
  allpaths := path X Y /\ print (X to Y) /\ false.

Define
  alledgepaths
by
  alledgepaths := edgepath X Y /\ print (X to Y) /\ false.

Define
  connected
by
  connected := forall X Y, node X -> node Y => edgepath X Y.

Define
  disconnected
by
  disconnected := exists X Y, node X /\ node Y /\ (edgepath X Y -> false).
