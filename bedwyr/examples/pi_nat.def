#include "pi.def".

%% Allow agent-style definitions as a controled recursion
one  P A PP := agent P Body, one  Body A PP.
onep P A PP := agent P Body, onep Body A PP.

agent (zero C)    (in C s\ in C n\ out n nil z).
agent (succ P C)  (in C s\ in C n\ out s P z).
agent (add P Q R) (nu s\ nu n\ out P s (out P n
                    (in R ss\ in R nn\
                      (plus (in s k\ nu kk\ (par (out ss kk z) (add k Q kk)))
                            (in n nil\ out Q ss (out Q nn z)))))).
 
agent (nat (s N) C) (in C s\ in C zz\ nu n\ par (out s n z) (nat N n)).
agent (nat zz    C) (zero C).

% Tests about simulations (the third one has several solutions)
#assert (weak_sim (nat (s (s zz)) c) (nat (s (s zz)) c)).
#assert (weak_sim (nat (s zz) c)
                  (nu x\ nu y\ par (par (nat zz x) (nat (s zz) y))
                                   (add x y c))).

% Tests about bisimulations
#assert (weak_bisim (nu u\ nu d\ (par (nat zz u)
                                 (par (nat (s zz) d)
                                      (add u d t))))
                    (nat (s zz) t)).

#assert (weak_bisim (nu u\ nu d\ (par (nat (s (s zz)) d)
                                 (par (nat (s (s (s zz))) u)
                                      (add u d t))))
                    (nat (s (s (s (s (s zz))))) t)).

#assert_not (weak_bisim (nu u\ nu d\ (par (nat (s zz) d)
                                     (par (nat (s zz) u)
                                          (add u d t))))
                       (nat (s zz) t)).
