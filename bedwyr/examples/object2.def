% A very simple object logic: a fragment of intuitionistic logic with
% universal quantifier and implication. The implication formulas are
% restricted to the ones with only atomic formulas on the left of
% implication.

% Example taken from the CADE2007 system description for Bedwyr.

Kind form       type.

Kind obj        type.
Type p          obj -> obj -> form.
Type impl       form -> form -> form.
Type for_all    (obj -> form) -> form.

Define pv : list form -> form -> prop by
  pv L (p X Y) := member (p X Y) L;
  pv L (impl A B) := pv (A :: L) B;
  pv L (for_all B) := nabla x, pv L (B x).

#assert
  (forall r s t,
     pv nil (for_all x\ impl (p x r) (for_all y\ impl (p y s) (p x t))) -> r = t).

#assert_not
  (forall r s t,
     pv nil (for_all x\ impl (p x r) (for_all y\ impl (p y s) (p x t))) -> r = s).
