%% Here is a little game for determining if a proposal formula
%% over tt, ff (truth values) or, and (binary prop functions) is
%% true or false.  (dam)

%% WARNING: this file is broken.

%% First, decide what are the conjunctions and disjunctions of a formula.

conj K (and B C) := conj K B ; conj K C.
conj (or K H) (or K H).
conj ff ff.

disj K (or B C) := disj K B ; disj K C.
disj (and K H) (and K H).
disj tt tt.

%% A formula is true if all its conjuncts are not false.
%% A formula is false if all its disjuncts are not true.

vrai B := pi K\ conj K B  => faux K => false.
faux B := pi K\ disj K B  => vrai K => false.

%% Note that neither of these predicates are stratified (using levels 
%% assigned to predicates).

test1 := vrai (or (and tt (or tt ff)) (and ff ff)).
test2 := vrai (or (and ff (or tt ff)) (and ff ff)).
test3 := faux (or (and ff (or tt ff)) (and ff ff)).
test4 := vrai (and (or tt (and ff tt)) (or (and tt (or ff tt)) tt)).
test5 := faux (and (or tt (and ff tt)) (or (and tt (or ff tt)) tt)).

%% Just to make bedwyr work, let's generate all formulas containing a
%% given number of conjunctions and disjunctions, and ask the 
%% system to verify that they are all either true or false.

sum    z  N    N.
sum (s N) M (s P) := sum N M P.

form (s N) (and B C) := sum N1 N2 N, form N1 B, form N2 C.
form (s N) (or  B C) := sum N1 N2 N, form N1 B, form N2 C.
form z tt.
form z ff.

dotest N := pi F\ (form N F => (faux F ; vrai F)).

% The test actually fails because this it falls outside
% the Level 0/1 fragment.

test := test1, test2, test3, test4, test5, dotest (s (s (s (s z)))).
