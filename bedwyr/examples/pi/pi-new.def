% Specification of late pi-calculus and strong bisimulation
%
% Please refer to the following paper for background:
%
% Alwen Tiu and Dale Miller. A proof search specification of
% the pi-calculus. Proceedings of FGUC04.
% Available from http://www.loria.fr/~tiu

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%     lambda-tree syntax for pi-calculus expressions     %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Kind    name    type.
Type    a,b,c,x,y name.     % some names

Kind    a           type.   % exactly three action constructors
Type    tau         a.
Type    dn,up       name -> name -> a.

Kind    p           type.   % Processes
Type    in   	    name -> (name -> p) -> p.
Type    out  	    name -> name -> p -> p.
Type    taup 	    p -> p.
Type    match       name -> name -> p -> p.
Type    plus, par   p -> p -> p.
Type    nu          (name -> p) -> p.
Type    bang        p -> p.
Type    z           p.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%                 A few example processes                %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define example : nat -> p -> prop by
  example 0  (nu x\ match x a (taup z));
  example 1  (par (in x y\z) (out x a z));
  example 2  (plus (in x y\out x a z) (out x a (in x y\z)));
  example 3  (in x u\ (plus (taup (taup z)) (taup z)));
  example 4  (in x u\ (plus (taup (taup z))
                      (plus (taup z)
                            (taup (match u y (taup z))))));
  example 5  (nu a\ (par (in x y\z) (out x a z)));
  example 6  (nu a\ (plus (in x y\out x a z) (out x a (in x y\z))));
  example 7  (taup z);
  example 8  (nu x\ (par (in x y\z) (out x a z)));
  example 9  (nu x\ out a x z);
  example 10 (par (in x y\ z) (nu y\ out x y z));
  example 11 (in x u\ nu y\ ((plus (taup (taup z))
                             (plus (taup z)
                                   (taup (match u y (taup z)))))));
  example 12 (bang P) := example 1 P;
  example 13 (bang (nu x\ par (out x a z) (in x y\ out c y z)));
  example 14 (bang (taup (out c a z))).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%     Place here a list of defined pi-calculus agents    %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Type  quiet  p.
Define
   pidef : p -> p -> prop
by
   pidef quiet (nu x\ out x x z).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%     One step transition rules for the pi-calculus      %%%%
%%%%     Notice the rules are nearly identical to the       %%%%
%%%%     published inference rules for the pi-calculus.     %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% bound input
Define
  one  :  p ->          a  ->          p  -> prop,
  onep :  p -> (name -> a) -> (name -> p) -> prop
by
  onep (in X M) (dn X) M;

  % free output
  one  (out X Y P) (up X Y) P;

  % tau
  one  (taup P) tau P;

  % match prefix
  one  (match X X P) A Q := one P A Q;
  onep (match X X P) A M := onep P A M;

  % sum
  one  (plus P Q) A R := one  P A R;
  one  (plus P Q) A R := one  Q A R;
  onep (plus P Q) A M := onep P A M;
  onep (plus P Q) A M := onep Q A M;

  % par
  one  (par P Q) A (par P1 Q) := one P A P1;
  one  (par P Q) A (par P Q1) := one Q A Q1;
  onep (par P Q) A (x\par (M x) Q) := onep P A M;
  onep (par P Q) A (x\par P (N x)) := onep Q A N;

  % restriction
  one  (nu P) A (nu Q)          := nabla x, one  (P x) A (Q x);
  onep (nu P) A (y\ nu x\Q x y) := nabla x, onep (P x) A (y\ Q x y);

  % open
  onep (nu x\M x) (up X) N := nabla y, one (M y) (up X y) (N y);

  % close
  one (par P Q) tau (nu y\ par (M y) (N y)) :=
    exists X, onep P (dn X) M /\ onep Q (up X) N;
  one (par P Q) tau (nu y\ par (M y) (N y)) :=
    exists X, onep P (up X) M /\ onep Q (dn X) N;

  % comm
  one (par P Q) tau (par R T) :=
    exists X Y M, onep P (dn X) M /\ one Q (up X Y) T /\ R = (M Y);
  one (par P Q) tau (par R T) :=
    exists X Y M, onep Q (dn X) M /\ one P (up X Y) R /\ T = (M Y);

  % Rep-act
  one  (bang P) A (par P1 (bang P))       := one P A P1;
  onep (bang P) X (y\ par (M y) (bang P)) := onep P X M;

  % Rep-com
  one (bang P) tau (par (par R T) (bang P)) :=
    exists X Y M, onep P (dn X) M /\ one P (up X Y) R /\ T = (M Y);

  % Rep-close
  one (bang P) tau (par (nu y\ par (M y) (N y)) (bang P)) :=
    exists X, onep P (up X) M /\ onep P (dn X) N;

  % Allow agent-style definitions
  one  P A PP := pidef P Body /\ one  Body A PP;
  onep P A PP := pidef P Body /\ onep Body A PP.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%              Simulation and bisimulation               %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define coinductive sim :  p -> p -> prop by
  sim P Q :=
	(forall A P1, one P A P1 -> exists Q1, one Q A Q1 /\ sim P1 Q1) /\
	(forall X M, onep P (dn X) M -> exists N, onep Q (dn X) N /\
					forall w, sim (M w) (N w)) /\
	(forall X M, onep P (up X) M -> exists N, onep Q (up X) N /\
					nabla w, sim (M w) (N w)).

Define coinductive bisim : p -> p -> prop by
  bisim P Q :=
	(forall A P1, one P A P1 -> exists Q1, one Q A Q1 /\ bisim P1 Q1) /\
	(forall X M, onep P (dn X) M -> exists N, onep Q (dn X) N /\
					forall w, bisim (M w) (N w)) /\
	(forall X M, onep P (up X) M -> exists N, onep Q (up X) N /\
					nabla w, bisim (M w) (N w)) /\
	(forall A Q1, one Q A Q1 -> exists P1, one P A P1 /\ bisim P1 Q1) /\
	(forall X N, onep Q (dn X) N -> exists M, onep P (dn X) M /\
					forall w, bisim (M w) (N w)) /\
	(forall X N, onep Q (up X) N -> exists M, onep P (up X) M /\
					nabla w, bisim (M w) (N w)).

#assert (bisim (in a x\ in a y\ z) (in a x\ nu w\ in a y\ z)).
#assert (forall P, bisim (in a x\ nu y\ match x y P)
                     (in a x\ z)).
#assert_not (P = out a a z /\
             bisim (nu x\ out a x (in c y\ match x y P))
                   (nu x\ out a x (in c y\ z))).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%           Weak Simulation and bisimulation             %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define taus : p -> p -> prop by
  taus P QQ := one P tau Q /\ taus Q QQ;
  taus P P.

Define weak_one : p -> a -> p -> prop by
  weak_one Q (up X Y) P := taus Q QQ /\ one QQ A PP /\ taus PP P;
  weak_one Q tau QQ     := taus Q QQ.

Define weak_onep : p -> (name -> a) -> (name -> p) -> prop by
  weak_onep Q (up X) P :=
    taus Q QQ /\ onep QQ (up X) PP /\ nabla x, taus (PP x) (P x);
  weak_onep Q (dn X) P :=
    taus Q QQ /\ onep QQ (dn X) PP /\ nabla x, taus (PP x) (P x).

Define coinductive weak_sim : p -> p -> prop by
  weak_sim P Q :=
    forall A X M M',
      (one  P A M       -> exists N, weak_one  Q A N /\
                                   weak_sim M N) /\
      (onep P (dn X) M' -> exists N, weak_onep Q (dn X) N /\
                                   forall w, weak_sim (M' w) (N w)) /\
      (onep P (up X) M' -> exists N, weak_onep Q (up X) N /\
                                   nabla w, weak_sim (M' w) (N w)).

Define coinductive weak_bisim : p -> p -> prop by
  weak_bisim P Q :=
	(forall A P1, one P A P1      -> exists Q1, weak_one Q A Q1 /\ 
                                                weak_bisim P1 Q1) /\

	(forall X M, onep P (dn X) M -> exists N, weak_onep Q (dn X) N /\
					        forall w, weak_bisim (M w) (N w)) /\

	(forall X M, onep P (up X) M -> exists N, weak_onep Q (up X) N /\
					        nabla w, weak_bisim (M w) (N w)) /\

	(forall A Q1, one Q A Q1     -> exists P1, weak_one P A P1 /\
                                                weak_bisim P1 Q1) /\

	(forall X N, onep Q (dn X) N -> exists M, weak_onep P (dn X) M /\
                                                forall w, weak_bisim (M w) (N w)) /\

	(forall X N, onep Q (up X) N -> exists M, weak_onep P (up X) M /\
                                                nabla w, weak_bisim (M w) (N w)).

