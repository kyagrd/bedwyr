% Bisimulation modulo equality theories
%
% We consider a simple example of bisimulation modulo some equality
% theory, e.g., structural congruence or even bisimulation itself.
% The reason for having this equality theory is to help the tabling
% system to identify semantically equivalent processes, although
% they may be syntactically different.
% For example, if proof search for (bisim P Q) reduces to
% (bisim (P | 0) Q), then we know that we have essentially reach a
% cycle. But the tabling of bedwyr does not recognize the cycle,
% so we have to rewrite (P | 0) to P.
%
% Basically any sort of confluent and terminating rewrite system
% can be added to bisimulation checking. The soundness of such
% a rewriting with respect to (strong, weak) bisimulation must however
% be proved at the meta level.

% one step transitions: taken from pi.def. For simplicity we omit
% the match prefix and the non-deterministic choice operator.
Define
  one,
  onep
by
  onep (in X M) (dn X) M;
  one (out X Y P) (up X Y) P;
  one  (taup P) tau P;
  one  (par P Q) A (par P1 Q) := one P A P1;
  one  (par P Q) A (par P Q1) := one Q A Q1;
  onep (par P Q) A (x\par (M x) Q) := onep P A M;
  onep (par P Q) A (x\par P (N x)) := onep Q A N;
  one  (nu x\P x) A (nu x\Q x)      := nabla x, one  (P x) A (Q x);
  onep (nu x\P x) A (y\ nu x\Q x y) := nabla x, onep (P x) A (y\ Q x y);
  onep (nu x\M x) (up X) N := nabla y, one (M y) (up X y) (N y);
  one (par P Q) tau (nu y\ par (M y) (N y)) :=
    exists X, onep P (dn X) M /\ onep Q (up X) N;
  one (par P Q) tau (nu y\ par (M y) (N y)) :=
    exists X, onep P (up X) M /\ onep Q (dn X) N;
  one (par P Q) tau (par R T) :=
    exists X Y M, onep P (dn X) M /\ one Q (up X Y) T /\ R = (M Y);
  one (par P Q) tau (par R T) :=
    exists X Y M, onep Q (dn X) M /\ one P (up X Y) R /\ T = (M Y);
  one  (bang P) A (par P1 (bang P)) := one P A P1;
  onep (bang P) X (y\ par (M y) (bang P)) := onep P X M;
  one (bang P) tau (par (par R T) (bang P)) :=
    exists X Y M, onep P (dn X) M /\ one P (up X Y) R /\ T = (M Y);
  one (bang P) tau (par (nu y\ par (M y) (N y)) (bang P)) :=
    exists X, onep P (up X) M /\ onep P (dn X) N.

% weak bisimulation


Define
  taus
by
  taus P QQ := one P tau Q /\ taus Q QQ;
  taus P P.

Define
  weak_one
by
  weak_one Q (up X Y) P := taus Q QQ /\ one QQ A PP /\ taus PP P;
  weak_one Q tau QQ     := taus Q QQ.
Define
  weak_onep
by
  weak_onep Q (up X) P :=
    taus Q QQ /\ onep QQ (up X) PP /\ nabla x, taus (PP x) (P x);
  weak_onep Q (dn X) P :=
  taus Q QQ /\ onep QQ (dn X) PP /\ nabla x, taus (PP x) (P x). % forall -> not llam

Define
  coinductive weak_bisim
by
  weak_bisim P Q :=
	(forall A P1, one P A P1 ->
           exists Q1, weak_one Q A Q1 /\ weak_bisim P1 Q1) /\

	(forall X M, onep P (dn X) M -> exists N, weak_onep Q (dn X) N /\
					forall w, weak_bisim (M w) (N w)) /\

	(forall X M, onep P (up X) M -> exists N, weak_onep Q (up X) N /\
					nabla w, weak_bisim (M w) (N w)) /\

	(forall A Q1, one Q A Q1 ->
           exists P1, weak_one P A P1 /\ weak_bisim P1 Q1) /\

	(forall X N, onep Q (dn X) N -> exists M, weak_onep P (dn X) M /\
					forall w, weak_bisim (M w) (N w)) /\

	(forall X N, onep Q (up X) N -> exists M, weak_onep P (up X) M /\
					nabla w, weak_bisim (M w) (N w)).


% reduction for some structural congruences

Define
  red
by
  red (nu x\ P) P;
  red (nu x\ par P (M x)) (par P (nu M));
  red (nu x\ par (M x) P) (par (nu M) P);
  red (par z P) P;
  red (par P z) P.

Define
  congr
by
  congr P Q := red P Q;
  congr (taup P) (taup Q) := congr P Q;
  congr (in X M) (in X N) := nabla x, congr (M x) (N x);
  congr (out X Y P) (out X Y Q) := congr P Q;
  congr (par P Q) (par R Q) := congr P R;
  congr (par P Q) (par P R) := congr Q R;
  congr (nu M) (nu N) := nabla x, congr (M x) (N x);
  congr (bang P) (bang Q) := congr P Q.


% equality modulo structural congruence and other equalities

Define
  eq
by
  eq struct P P := forall Q, congr P Q -> false;
  eq struct P R := congr P Q /\ eq struct Q R.

% modulo weak bisimulation for certain process pairs:
%  (P | !Q) is weakly bisimilar to !Q if and only if
%   P is weakly bisimilar to Q.
%  (!P | !Q) is weakly bisimilar to !Q if and only if
%   P  is weakly bisimilar to Q.

Define
  weak_bisim_eq
by
  weak_bisim_eq (par (bang P) (bang Q)) (bang Q) :=
  weak_bisim P Q;
  weak_bisim_eq (par P (bang Q)) (bang Q) :=
  weak_bisim P Q.


Define
  eq
by
  eq weak P Q := weak_bisim_eq P Q;
  eq X P P.


% bisimulation modulo some equality theories.
% the parameter E gives the type of equality we want.

Define
  coinductive bisim_mod
by
  bisim_mod E P Q :=
  exists R T,
    eq E P R /\ eq E Q T /\ bisim E R T.

Define
  coinductive bisim
by
  bisim E P Q :=
	(forall A P1, one P A P1 -> exists Q1, one Q A Q1 /\ bisim_mod E P1 Q1) /\
	(forall X M, onep P (dn X) M -> exists N, onep Q (dn X) N /\
					forall w, bisim_mod E (M w) (N w)) /\
	(forall X M, onep P (up X) M -> exists N, onep Q (up X) N /\
					nabla w, bisim_mod E (M w) (N w)) /\
	(forall A Q1, one Q A Q1 -> exists P1, one P A P1 /\ bisim_mod E Q1 P1) /\
	(forall X N, onep Q (dn X) N -> exists M, onep P (dn X) M /\
					forall w, bisim_mod E (N w) (M w)) /\
	(forall X N, onep Q (up X) N -> exists M, onep P (up X) M /\
					nabla w, bisim_mod E (N w) (M w)).

% some simple examples

Define
  example
by
  example 1 (bang (nu x\ par (out x a z) (in x y\ out c y z)));
  example 2 (bang (taup (out c a z)));
  example 3 (bang (nu x\ par (out x a z) (in x y\ z)));
  example 4 (bang (taup z)).


% Process 1 and process 2 are bisimilar modulo the weak bisimilarity.
% In this case the bisim predicate actually gives weak bisimilarity.
Define
  test1
by
  test1 := example 1 P /\ example 2 Q /\ bisim_mod weak P Q.

% Process 3 and 4 are strongly bisimilar. In this case it's enough
% to use only structural congruence.
Define
  test2
by
  test2 := example 3 P /\ example 4 Q /\ bisim_mod struct P Q.

Define
  test3
by
  test3 := example 1 P /\ bisim_mod weak P (par P P).

Define
  test4
by
  test4 := example 1 P /\ example 2 Q /\ bisim_mod weak P (par P Q).


