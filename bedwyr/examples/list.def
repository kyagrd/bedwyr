% Here we define an append predicate and prove properties about it such as
% coverage and determinancy. Bedwyr does not yet support induction, so we
% use the "list" predicate to isolate a finite domain to work over.
% Eventually, it would be nice to extend Bedwyr to handle the general case
% since coverage and determinancy checks would be useful to lambda prolog
% programmers, for example.

Define list : list _ -> prop by
  list nil;
  list (X :: nil);
  list (X :: Y :: nil);
  list (X :: Y :: Z :: nil).

Define append : list A -> list A -> list A -> prop by
  append nil K K;
  append (X :: L) K (X :: M) := append L K M.

Define remove : list A -> A -> list A -> prop by
  remove (X :: L) X L;
  remove (Y :: L) X (Y :: Lp) := remove L X Lp.

% In the following checks, we assume the mode: append +L +K -M.

% Coverage implicitly proves termination
Define coverage : prop by
  coverage := forall L K, list L -> exists M, append L K M.

Define determinacy : prop by
  determinacy := forall L K M Mp,
    list L -> append L K M -> append L K Mp -> M = Mp.

#assert coverage.
#assert determinacy.
#assert member 3 (1 :: 3 :: nil).
#assert_not (exists X, member X nil).
#assert_not (exists X, forall a, member X (a :: nil)).
#assert (forall a, exists X, member X (a :: nil)).
