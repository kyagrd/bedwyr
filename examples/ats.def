%% Abstract Transition Systems (ats)
%% Some experiments encoding ats into Bedwyr.

% Display all the one-step transitions of the ats
display One := One P A Q, print (One P A Q), false.

% Determine if transition system is determinate or not.
determinate One :=  pi P\ pi A\ pi Q\ pi R\ One P A Q =>  One P A R => Q = R.

coinductive sim One P Q := 
   pi P1\ pi A\ One P A P1 => sigma Q1\ One Q A Q1 & sim One P1 Q1.

coinductive bisim One P Q :=
   (pi P1\ pi A\ One P A P1 => sigma Q1\ One Q A Q1 & bisim One P1 Q1) &
   (pi Q1\ pi A\ One Q A Q1 => sigma P1\ One P A P1 & bisim One P1 Q1).

%% ATS 0:  a.b

one0 p a q.
one0 q b r.

% Tests:  
% This ats is determinate
% Postive:  sim one0 p p, sim one0 q q, sim one0 r r.
% Negative: sim one0 p q.

%% ATS 1: a.b + a.c vs a.(b+c)
one1 p a q.
one1 p a r.
one1 q b s.
one1 r c t.
one1 u a v.
one1 v b w.
one1 v c x.

% Tests:
% Postive:  sim one1 p u.
% Negative: sim one1 u p.

%% ATS 2:
one2 p a q.
one2 p a t.
one2 q a p.
one2 s a s.

% Tests:
% Positive: sim one2 s s, sim one2 q s, sim one2 p s, sim one2 s p.
% Negative: sim one2 s t, bisim one2 p s.

%% ATS 3:  (a.b + a.c) vs a.(b + c)
one3 p a q.
one3 p a s.
one3 q b t.
one3 s c u.
one3 v a w.
one3 w b x.
one3 w c y.

% Tests:
% Postive:  sim one3 p v, sim one3 s w.
% Negative: sim one3 v p, sim one3 w s.

%% ATS 4: (a.b.c + a.b.d) vs a.(b.c + b.d)
one4  0 a  1.
one4  0 a  2.
one4  1 b  3.
one4  3 c  4.
one4  2 b  5.
one4  5 d  6.
one4  7 a  8.
one4  8 b  9.
one4  8 b 10.
one4  9 c 11.
one4 10 d 12.

% Tests:
% Postive:  sim one4 12 6, sim one4 10 5.
% Negative: sim one4 10 3, sim one4 7 0.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Before tabling and loop detection was introduced into Bedwyr, we 
%% could try to detect loops ourselves using the following code.  This is not
%% needed any more but might be a useful as a programming example.

% membership in a list.  This predicate always succeeds with a boolean value. 
member X nil        ff.
member X (cons Y L) Bool := (X = Y => false) & member X L Bool.
member X (cons X L) tt.

% co-induction with History checking.  Simply check that goal appears
% before.  If so, succeed.  Here, pr is for pairing.

cyclic R History P Q := 
   member (pr P Q) History Bool &
   (Bool = tt;  % A cycle observed so succeed - coinduction
    (Bool = ff & (R (cyclic R (cons (pr P Q) History)) P Q))).

cycsim One P Q :=
    cyclic (S\ P\ Q\ (pi P1\ pi A\ One P A P1 => sigma Q1\ One Q A Q1 & S P1 Q1))
           nil P Q.

cycbisim One P Q :=
    cyclic (S\ P\ Q\ ((pi P1\ pi A\ One P A P1 => sigma Q1\ One Q A Q1 & S P1 Q1) &
                      (pi Q1\ pi A\ One Q A Q1 => sigma P1\ One P A P1 & S P1 Q1)))
           nil P Q.
