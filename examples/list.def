% Here we define an append predicate and prove properties about it such as
% coverage and determinancy. Bedwyr does not yet support induction, so we
% use the "list" predicate to isolate a finite domain to work over.
% Eventually, it would be nice to extend Bedwyr to handle the general case
% since coverage and determinancy checks would be useful to lambda prolog
% programmers, for example.

Kind    list    type.

Type    nil     list.
Type    cons    nat -> list -> list.

Define list : list -> prop by
  list nil;
  list (cons X nil);
  list (cons X (cons Y nil));
  list (cons X (cons Y (cons Z nil))).

Define member : nat -> list -> prop by
  member X (cons X _);
  member X (cons _ L) := member X L.

Define append : list -> list -> list -> prop by
  append nil K K;
  append (cons X L) K (cons X M) := append L K M.

% In the following checks, we assume the mode: append +L +K -M.

% Coverage implicitly proves termination
Define coverage : prop by
  coverage := forall L K, list L -> exists M, append L K M.

Define determinacy : prop by
  determinacy := forall L K M Mp,
    list L -> append L K M -> append L K Mp -> M = Mp.

#assert coverage.
#assert determinacy.
#assert (member 3 (cons 1 (cons 3 nil))).
#assert_not (exists X, member X nil).
#assert_not (exists X, forall a, member X (cons a nil)).
#assert (forall a, exists X, member X (cons a nil)).
